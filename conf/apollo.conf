{
    "center_of_buoyancy": [0.000, 0.000, -0.02],
    "buoyancy_force": 197,
    "gravity_force": 194,
    // only used for partially submerged buoyancy force calculation, non-critical
    "sub_height": 0.20,
    // Moments of inertia (kg * m^2) from solidworks.  // In the model frame.
    "I": [[ 0.551, 0.055, 0.005],
          [ 0.055, 0.560, 0.009],
          [ 0.005, 0.009, 0.601]],

    // Ib and btom_rq calculated using auv-body-frame-calc.
    "Ib": [ 0.500257, 0.59477, 0.616973 ],

    // A normalized quaternion representing rotation from the body to the model
    // frame.

    "btom_rq": [ -0.166513, 0.324716, 0.812771, -0.454132 ],

    // Calcuated via auv-cw-hw-calc
    "cwhe_axes": [86.96194738000005, 86.96194738, 173.92389476, 40.8721152686, 56.525265797, 69.56955790399999],
    "thruster_minimums": [94.7729088979, 94.7729088979, 189.545817796, 40.9502248838, 57.8531292551, 69.4914482888],
    "thruster_maximums": [-79.1509858621, -79.1509858621, -158.301971724, -40.7940056534, -55.1974023389, -69.6476675192],

    "thrusters": [
        { 
            "name": "sway_fore",    
            "type": "T100", 
            "pos": [ 0.223, 0.000, 0.039],   
            "heading_pitch": [90,  0],
            "reversed": true
        },
        { 
            "name": "starboard",     
            "type": "T100", 
            "pos": [-0.001, 0.190, -0.047],  
            "heading_pitch": [0,   0]
        },
        { 
            "name": "aft_starboard", 
            "type": "T100", 
            "pos": [-0.132,  0.190, 0.119], 
            "heading_pitch": [0,  -90]
        },
        { 
            "name": "sway_aft",      
            "type": "T100", 
            "pos": [-0.235,  0.010, -0.180], 
            "heading_pitch": [90,  0]
        },
        { 
            "name": "port",          
            "type": "T100", 
            "pos": [-0.001, -0.181, -0.047], 
            "heading_pitch": [0,   0]
        },
        { 
            "name": "fore_port",     
            "type": "T100", 
            "pos": [ 0.140, -0.181, 0.119], 
            "heading_pitch": [0,  -90]
        }
    ],

    "control_settings": {
        "depth":    { "kP": 7.00, "kI": 0.30, "kD": 3.20, "rD": 0.5, "ramp_speed": 0.5 },
        "pitch":    { "kP": 0.50, "kI": 0.00, "kD": 0.10, "rD": 50.0 },
        "heading":  { "kP": 0.25, "kI": 0.00, "kD": 0.30, "rD": 20.0 },
        "velx":     { "kP": 5.00, "kI": 0.00, "kD": 0.50, "rD": 0.1547 },
        "vely":     { "kP": 5.00, "kI": 0.00, "kD": 0.50, "rD": 0.5 },
        "roll":     { "kP": 0.00, "kI": 0.00, "kD": 0.00, "rD": 50.0 },
        "quat":     { "kP": 30.0, "kI": 0.00, "kD": 4.00 }
    },
    "quaternion_filtering": 0,

    "drag_planes": [
        // horizontal, produces drag when diving and pitching
        {
            "pos": [0.25, 0, 0],
            "normal": [0, 0, 1],
            "cD": 2.0,
            "area": 0.0
        },
        {
            "pos": [-0.25, 0, 0],
            "normal": [0, 0, 1],
            "cD": 2.0,
            "area": 0.0
        },
        // fore sway, produces drag when swaying and rolling
        {
            "pos": [0, 0, -0.10],
            "normal": [0, 1, 0],
            "cD": 2.0,
            "area": 0.2
        }, // aft sway
        {
            "pos": [0, 0, 0.10],
            "normal": [0, 1, 0],
            "cD": 2.0,
            "area": 0.2
        },
        // vertical, produces drag when going forward and yawing
        {
            "pos": [0, -0.25, 0],
            "normal": [1, 0, 0],
            "cD": 2.0,
            "area": 0.10
        },
        {
            "pos": [0, 0.25, 0],
            "normal": [1, 0, 0],
            "cD": 2.0,
            "area": 0.10
        }
    ],

    // uncompensated drag, to simulate drag that is not accounted for by the controller
    // (or that the controller can't efectively account for)
    "uncompensated_drag_planes": [
    ],

    "dvl_present": false,
    "sensors": {
        "depth": "depth.depth",
        "depth_offset": "depth.offset",

        "heading_rate": "gx4.ratez",
        "pitch_rate": "gx4.ratey",
        "roll_rate": "gx4.ratex",
        "quaternion": "gx4"
    },

    "measurement_error": {
        "velSigma": 0.005,
        "depthSigma": 1,
        "accSigma": 1000
    },


    // TODO Populate components.
    "components": {
    },

    "cameras": {
      "forward": {
        "type": "ueye",
        "id": 2,
        "camera_name": "ueye_forward",
        "width": 1600,
        "height": 1200,
        "orientation_hpr": [0, 0, 0],
        
        // These are not correct and currently copied from thor.conf!
        // Required by visualizer to run
        "position": [0.48, 0.15, -0.08],
        "orientation_hpr":  [0, 0, 0],

        // The optical sensor size of the CAMERA, width and height in mm
        // This should typically be in the same ratio as the resolution, above.
        "sensor_size_wh_mm": [7.2, 5.4],
        // The focal length of the LENS in mm
        "focal_length_mm": 3.6
      },

      "downward": {
        "type": "ximea",
        "id": 1,
        "camera_name": "ximea_downward",
        "width": 1024,  // WARNING: The Ximea capture source currently ignores this and always picks the default.
        "height": 1024,  // WARNING: The Ximea capture source currently ignores this and always picks the default.
        "rotate180": "true",
        "orientation_hpr": [0, -90, 0],
        "sensor_size_wh_mm": [11.27, 11.27],
        "focal_length_mm": 8,
        
        // These are not correct and currently copied from thor.conf!
        // Required by visualizer to run
        "position": [0.0, 0.0, 0.15],
        "orientation_hpr": [0, -90, 0]

      }
    },

    "vision_modules": [
      {"name": "buoys", "capture_sources": ["forward"]},
      {"name": "wire", "capture_sources": ["forward"]},
      {"name": "torpedoes", "capture_sources": ["forward"]},
      {"name": "pipes", "capture_sources": ["downward"]},
      {"name": "bins", "capture_sources": ["downward"]},
      {"name": "record", "capture_sources": ["forward", "downward"]},
      {"name": "poster", "capture_sources": ["forward", "downward"]}
    ]
}
// vim: set filetype=javascript expandtab :
