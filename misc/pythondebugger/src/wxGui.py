#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.7 on Tue Jun  4 23:39:02 2013
#

import wx, serialTalker, threading

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import os
from confParser import parseConfigurationFile

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.lock = threading.Lock()
        self.board = 0
        self.mySerialTalker = 0
        self.read_button = wx.Button(self, wx.ID_ANY, _("Read"))
        self.write_button = wx.Button(self, wx.ID_ANY, _("Write"))
        self.label_1 = wx.StaticText(self, wx.ID_ANY, _("Data Type"))
        self.datatype_choice = wx.Choice(self, wx.ID_ANY, choices=[_("hex"), _("bin"), _("dec")])
        self.label_2 = wx.StaticText(self, wx.ID_ANY, _("Value"))
        self.value_text = wx.TextCtrl(self, wx.ID_ANY, "")
        self.connect_button = wx.Button(self, wx.ID_ANY, _("Connect"))
        self.scan_button = wx.Button(self, wx.ID_ANY, _("Scan"))
        self.label_4 = wx.StaticText(self, wx.ID_ANY, _("Port"))
        self.ports = serialTalker.list_serial_ports()
        self.port_choice = wx.Choice(self, wx.ID_ANY, choices=self.ports)
        self.label_5 = wx.StaticText(self, wx.ID_ANY, _("Baud"))
        self.baud_text = wx.StaticText(self, wx.ID_ANY, _("N/A"))
        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        self.table = wx.ListCtrl(self.panel_1, wx.ID_ANY, style=wx.LC_REPORT | wx.LC_EDIT_LABELS | wx.SUNKEN_BORDER)
        self.table.InsertColumn(0, "Name", width=-1)
        self.table.InsertColumn(1, "Address", width=-1)
        self.table.InsertColumn(2, "Type", width=-1)
        self.table.InsertColumn(3, "Value", width=-1)

        self.config_button = wx.Button(self, wx.ID_ANY, _("Load Config"))
        self.file_label = wx.StaticText(self, wx.ID_ANY, _("N/A"), style=wx.ALIGN_CENTRE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.load_config, self.config_button)
        self.Bind(wx.EVT_BUTTON, self.read_callback, self.read_button)
        self.Bind(wx.EVT_BUTTON, self.write_callback, self.write_button)
        self.Bind(wx.EVT_BUTTON, self.connect_callback, self.connect_button)
        self.Bind(wx.EVT_BUTTON, self.scan_callback, self.scan_button)
        # end wxGlade
        #Publisher().subscribe(self.updateRegisterValues, "update")

        self.registers = None

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Serial Debugger"))
        self.datatype_choice.SetSelection(0)
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        self.g = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.read_button, 0, wx.EXPAND, 0)
        sizer_2.Add(self.write_button, 0, wx.EXPAND, 0)
        self.g.Add(self.label_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.g.Add(self.datatype_choice, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.g, 1, wx.EXPAND, 0)
        sizer_4.Add(self.label_2, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.value_text, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_5.Add(self.connect_button, 0, wx.EXPAND, 0)
        sizer_5.Add(self.scan_button, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_6.Add(self.label_4, 1, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(self.port_choice, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add(self.label_5, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_7.Add(self.baud_text, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_8.Add(self.table, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_8)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_9.Add(self.config_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.file_label, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_9, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def populate_grid(self, board):
        print "Populating Grid..."
        self.table.DeleteAllItems()
        self.registers = []

    
        for (i, address) in enumerate(board._registers.keys()):
            reg = board._registers[address]
            self.table.Append((str(reg), str(address), reg.type, ""))
            self.registers.append(reg)


    def load_config(self, event):  # wxGlade: MyFrame.<event_handler>
        diag = wx.FileDialog(self, "Open a config file", wildcard="*.conf")
        result = diag.ShowModal()
        if result == wx.ID_OK:
            path = diag.GetPath()
            self.board = parseConfigurationFile(path)
            self.populate_grid(self.board)
            self.file_label.SetLabel(path.split(os.sep)[-1])
            self.baud_text.SetLabel(self.board._baud_rate)
            self.init_serial()

    def init_serial(self):
        print self.ports[self.port_choice.GetSelection()]
        self.mySerialTalker = serialTalker.serialTalker(self.board, self.ports[self.port_choice.GetSelection()])

    def connect_callback(self, event):
        if not self.registers:
            print "Error: no config file"
            return 

        self.init_serial()

    def scan_callback(self, event):
        self.ports = serialTalker.list_serial_ports()
        self.port_choice.Clear()
        for port in self.ports:
            self.port_choice.Append(port)
        if len(self.ports) > 0:
            self.port_choice.SetSelection(0)
    def get_selected(self):
        ''' returns indices of selected items in the list ctrl '''
        inds = []
        last = -1
        while 1:
            index = self.table.GetNextItem(last, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)
            if index == -1:
                break
            else:
                last = index
                inds.append(index)

        return inds

    def read_callback(self, event):
        read_thread = threading.Thread(None, self.read)
        read_thread.start()
    def write_callback(self, event):
        write_thread = threading.Thread(None, self.write)
        write_thread.start()

    def read(self):
        if not self.registers:
            print "Error: no config file"
            return

        selected = self.get_selected()

        for i in selected:
            reg = self.registers[i]
            print "updating", str(reg)
            val = self.mySerialTalker.readRegister(reg, self.lock)
            self.table.SetStringItem(i, 3, str(val))

    def write(self):
        if not self.registers:
            print "Error: no config file"
            return

        selected = self.get_selected()
        value = self.value_text.GetValue()

        if value == "":
            print "Error: no value entered"
            return

        for i in selected:
            if self.registers[i].isReadOnly:
                print "Error: %s is read only!" % str(self.registers[i])
            else:
                print "writing", str(self.registers[i])
                if self.registers[i].type in ["int16", "uint32", "uint8", "bool", "uint16", "int8", "int32"]:
                    self.mySerialTalker.writeRegister(self.registers[i], int(value), self.lock)
   # def updateRegisterValues(self):

                elif self.registers[i].type in ["float"]:
                    self.mySerialTalker.writeRegister(self.registers[i], float(value), self.lock)

                else:
                    print "Error: %s is not a recognized type" % self.registers[i].type

# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "", size=(800, 800))
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
