// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Real_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Real_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Val_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Val_reflection_ = NULL;
struct ValOneofInstance {
  const ::Real* real_;
  const ::Vec2* vec2_;
  const ::Vec3* vec3_;
}* Val_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Real_descriptor_ = file->message_type(0);
  static const int Real_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real, val_),
  };
  Real_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Real_descriptor_,
      Real::default_instance_,
      Real_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Real));
  Vec2_descriptor_ = file->message_type(1);
  static const int Vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, val0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, val1_),
  };
  Vec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec2_descriptor_,
      Vec2::default_instance_,
      Vec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec2));
  Vec3_descriptor_ = file->message_type(2);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, val0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, val1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, val2_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Val_descriptor_ = file->message_type(3);
  static const int Val_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Val_default_oneof_instance_, real_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Val_default_oneof_instance_, vec2_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Val_default_oneof_instance_, vec3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Val, val_),
  };
  Val_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Val_descriptor_,
      Val::default_instance_,
      Val_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Val, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Val, _unknown_fields_),
      -1,
      Val_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Val, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Val));
  Req_descriptor_ = file->message_type(4);
  static const int Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, val_),
  };
  Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_descriptor_,
      Req::default_instance_,
      Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req));
  Res_descriptor_ = file->message_type(5);
  static const int Res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Res, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Res, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Res, error_),
  };
  Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Res_descriptor_,
      Res::default_instance_,
      Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Res));
  ReqType_descriptor_ = file->enum_type(0);
  ResStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Real_descriptor_, &Real::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec2_descriptor_, &Vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Val_descriptor_, &Val::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_descriptor_, &Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Res_descriptor_, &Res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete Real::default_instance_;
  delete Real_reflection_;
  delete Vec2::default_instance_;
  delete Vec2_reflection_;
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Val::default_instance_;
  delete Val_default_oneof_instance_;
  delete Val_reflection_;
  delete Req::default_instance_;
  delete Req_reflection_;
  delete Res::default_instance_;
  delete Res_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\"\023\n\004Real\022\013\n\003val\030\001 \002(\001\"\"\n\004Vec2"
    "\022\014\n\004val0\030\001 \002(\001\022\014\n\004val1\030\002 \002(\001\"0\n\004Vec3\022\014\n\004"
    "val0\030\001 \002(\001\022\014\n\004val1\030\002 \002(\001\022\014\n\004val2\030\003 \002(\001\"Q"
    "\n\003Val\022\025\n\004real\030\001 \001(\0132\005.RealH\000\022\025\n\004vec2\030\002 \001"
    "(\0132\005.Vec2H\000\022\025\n\004vec3\030\003 \001(\0132\005.Vec3H\000B\005\n\003va"
    "l\"L\n\003Req\022\026\n\004type\030\001 \002(\0162\010.ReqType\022\014\n\004func"
    "\030\002 \002(\t\022\014\n\004vars\030\003 \003(\t\022\021\n\003val\030\004 \001(\0132\004.Val\""
    "F\n\003Res\022\032\n\006status\030\001 \002(\0162\n.ResStatus\022\024\n\006re"
    "sult\030\002 \003(\0132\004.Val\022\r\n\005error\030\003 \001(\t*6\n\007ReqTy"
    "pe\022\017\n\013REQ_OBSERVE\020\000\022\014\n\010REQ_MOVE\020\001\022\014\n\010REQ"
    "_EVAL\020\002*2\n\tResStatus\022\021\n\rRES_STATUS_OK\020\000\022"
    "\022\n\016RES_STATUS_ERR\020\001", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  Real::default_instance_ = new Real();
  Vec2::default_instance_ = new Vec2();
  Vec3::default_instance_ = new Vec3();
  Val::default_instance_ = new Val();
  Val_default_oneof_instance_ = new ValOneofInstance;
  Req::default_instance_ = new Req();
  Res::default_instance_ = new Res();
  Real::default_instance_->InitAsDefaultInstance();
  Vec2::default_instance_->InitAsDefaultInstance();
  Vec3::default_instance_->InitAsDefaultInstance();
  Val::default_instance_->InitAsDefaultInstance();
  Req::default_instance_->InitAsDefaultInstance();
  Res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;
const ::google::protobuf::EnumDescriptor* ReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqType_descriptor_;
}
bool ReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResStatus_descriptor_;
}
bool ResStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Real::kValFieldNumber;
#endif  // !_MSC_VER

Real::Real()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Real)
}

void Real::InitAsDefaultInstance() {
}

Real::Real(const Real& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Real)
}

void Real::SharedCtor() {
  _cached_size_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Real::~Real() {
  // @@protoc_insertion_point(destructor:Real)
  SharedDtor();
}

void Real::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Real::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Real_descriptor_;
}

const Real& Real::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Real* Real::default_instance_ = NULL;

Real* Real::New() const {
  return new Real;
}

void Real::Clear() {
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Real::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Real)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double val = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Real)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Real)
  return false;
#undef DO_
}

void Real::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Real)
  // required double val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Real)
}

::google::protobuf::uint8* Real::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Real)
  // required double val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Real)
  return target;
}

int Real::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double val = 1;
    if (has_val()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Real* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Real*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Real::MergeFrom(const Real& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Real::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real::CopyFrom(const Real& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Real::Swap(Real* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Real::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Real_descriptor_;
  metadata.reflection = Real_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec2::kVal0FieldNumber;
const int Vec2::kVal1FieldNumber;
#endif  // !_MSC_VER

Vec2::Vec2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec2)
}

void Vec2::InitAsDefaultInstance() {
}

Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vec2)
}

void Vec2::SharedCtor() {
  _cached_size_ = 0;
  val0_ = 0;
  val1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec2_descriptor_;
}

const Vec2& Vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Vec2* Vec2::default_instance_ = NULL;

Vec2* Vec2::New() const {
  return new Vec2;
}

void Vec2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vec2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(val0_, val1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double val0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val0_)));
          set_has_val0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_val1;
        break;
      }

      // required double val1 = 2;
      case 2: {
        if (tag == 17) {
         parse_val1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val1_)));
          set_has_val1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vec2)
  return false;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vec2)
  // required double val0 = 1;
  if (has_val0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->val0(), output);
  }

  // required double val1 = 2;
  if (has_val1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->val1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vec2)
}

::google::protobuf::uint8* Vec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec2)
  // required double val0 = 1;
  if (has_val0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->val0(), target);
  }

  // required double val1 = 2;
  if (has_val1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->val1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec2)
  return target;
}

int Vec2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double val0 = 1;
    if (has_val0()) {
      total_size += 1 + 8;
    }

    // required double val1 = 2;
    if (has_val1()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val0()) {
      set_val0(from.val0());
    }
    if (from.has_val1()) {
      set_val1(from.val1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other != this) {
    std::swap(val0_, other->val0_);
    std::swap(val1_, other->val1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec2_descriptor_;
  metadata.reflection = Vec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec3::kVal0FieldNumber;
const int Vec3::kVal1FieldNumber;
const int Vec3::kVal2FieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec3)
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vec3)
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  val0_ = 0;
  val1_ = 0;
  val2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vec3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(val0_, val2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double val0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val0_)));
          set_has_val0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_val1;
        break;
      }

      // required double val1 = 2;
      case 2: {
        if (tag == 17) {
         parse_val1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val1_)));
          set_has_val1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_val2;
        break;
      }

      // required double val2 = 3;
      case 3: {
        if (tag == 25) {
         parse_val2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val2_)));
          set_has_val2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vec3)
  // required double val0 = 1;
  if (has_val0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->val0(), output);
  }

  // required double val1 = 2;
  if (has_val1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->val1(), output);
  }

  // required double val2 = 3;
  if (has_val2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->val2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vec3)
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec3)
  // required double val0 = 1;
  if (has_val0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->val0(), target);
  }

  // required double val1 = 2;
  if (has_val1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->val1(), target);
  }

  // required double val2 = 3;
  if (has_val2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->val2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec3)
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double val0 = 1;
    if (has_val0()) {
      total_size += 1 + 8;
    }

    // required double val1 = 2;
    if (has_val1()) {
      total_size += 1 + 8;
    }

    // required double val2 = 3;
    if (has_val2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val0()) {
      set_val0(from.val0());
    }
    if (from.has_val1()) {
      set_val1(from.val1());
    }
    if (from.has_val2()) {
      set_val2(from.val2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(val0_, other->val0_);
    std::swap(val1_, other->val1_);
    std::swap(val2_, other->val2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Val::kRealFieldNumber;
const int Val::kVec2FieldNumber;
const int Val::kVec3FieldNumber;
#endif  // !_MSC_VER

Val::Val()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Val)
}

void Val::InitAsDefaultInstance() {
  Val_default_oneof_instance_->real_ = const_cast< ::Real*>(&::Real::default_instance());
  Val_default_oneof_instance_->vec2_ = const_cast< ::Vec2*>(&::Vec2::default_instance());
  Val_default_oneof_instance_->vec3_ = const_cast< ::Vec3*>(&::Vec3::default_instance());
}

Val::Val(const Val& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Val)
}

void Val::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_val();
}

Val::~Val() {
  // @@protoc_insertion_point(destructor:Val)
  SharedDtor();
}

void Val::SharedDtor() {
  if (has_val()) {
    clear_val();
  }
  if (this != default_instance_) {
  }
}

void Val::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Val::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Val_descriptor_;
}

const Val& Val::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Val* Val::default_instance_ = NULL;

Val* Val::New() const {
  return new Val;
}

void Val::clear_val() {
  switch(val_case()) {
    case kReal: {
      delete val_.real_;
      break;
    }
    case kVec2: {
      delete val_.vec2_;
      break;
    }
    case kVec3: {
      delete val_.vec3_;
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void Val::Clear() {
  clear_val();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Val::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Val)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Real real = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vec2;
        break;
      }

      // optional .Vec2 vec2 = 2;
      case 2: {
        if (tag == 18) {
         parse_vec2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vec2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vec3;
        break;
      }

      // optional .Vec3 vec3 = 3;
      case 3: {
        if (tag == 26) {
         parse_vec3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vec3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Val)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Val)
  return false;
#undef DO_
}

void Val::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Val)
  // optional .Real real = 1;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->real(), output);
  }

  // optional .Vec2 vec2 = 2;
  if (has_vec2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vec2(), output);
  }

  // optional .Vec3 vec3 = 3;
  if (has_vec3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vec3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Val)
}

::google::protobuf::uint8* Val::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Val)
  // optional .Real real = 1;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->real(), target);
  }

  // optional .Vec2 vec2 = 2;
  if (has_vec2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vec2(), target);
  }

  // optional .Vec3 vec3 = 3;
  if (has_vec3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vec3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Val)
  return target;
}

int Val::ByteSize() const {
  int total_size = 0;

  switch (val_case()) {
    // optional .Real real = 1;
    case kReal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real());
      break;
    }
    // optional .Vec2 vec2 = 2;
    case kVec2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vec2());
      break;
    }
    // optional .Vec3 vec3 = 3;
    case kVec3: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vec3());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Val::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Val* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Val*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Val::MergeFrom(const Val& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.val_case()) {
    case kReal: {
      mutable_real()->::Real::MergeFrom(from.real());
      break;
    }
    case kVec2: {
      mutable_vec2()->::Vec2::MergeFrom(from.vec2());
      break;
    }
    case kVec3: {
      mutable_vec3()->::Vec3::MergeFrom(from.vec3());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Val::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Val::CopyFrom(const Val& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Val::IsInitialized() const {

  if (has_real()) {
    if (!this->real().IsInitialized()) return false;
  }
  if (has_vec2()) {
    if (!this->vec2().IsInitialized()) return false;
  }
  if (has_vec3()) {
    if (!this->vec3().IsInitialized()) return false;
  }
  return true;
}

void Val::Swap(Val* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Val::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Val_descriptor_;
  metadata.reflection = Val_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req::kTypeFieldNumber;
const int Req::kFuncFieldNumber;
const int Req::kVarsFieldNumber;
const int Req::kValFieldNumber;
#endif  // !_MSC_VER

Req::Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Req)
}

void Req::InitAsDefaultInstance() {
  val_ = const_cast< ::Val*>(&::Val::default_instance());
}

Req::Req(const Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Req)
}

void Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  func_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req::~Req() {
  // @@protoc_insertion_point(destructor:Req)
  SharedDtor();
}

void Req::SharedDtor() {
  if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete func_;
  }
  if (this != default_instance_) {
    delete val_;
  }
}

void Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_descriptor_;
}

const Req& Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Req* Req::default_instance_ = NULL;

Req* Req::New() const {
  return new Req;
}

void Req::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    type_ = 0;
    if (has_func()) {
      if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        func_->clear();
      }
    }
    if (has_val()) {
      if (val_ != NULL) val_->::Val::Clear();
    }
  }
  vars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReqType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReqType_IsValid(value)) {
            set_type(static_cast< ::ReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_func;
        break;
      }

      // required string func = 2;
      case 2: {
        if (tag == 18) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "func");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        break;
      }

      // repeated string vars = 3;
      case 3: {
        if (tag == 26) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vars()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vars(this->vars_size() - 1).data(),
            this->vars(this->vars_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vars");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        if (input->ExpectTag(34)) goto parse_val;
        break;
      }

      // optional .Val val = 4;
      case 4: {
        if (tag == 34) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Req)
  return false;
#undef DO_
}

void Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Req)
  // required .ReqType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string func = 2;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->func(), output);
  }

  // repeated string vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->vars(i).data(), this->vars(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "vars");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vars(i), output);
  }

  // optional .Val val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Req)
}

::google::protobuf::uint8* Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Req)
  // required .ReqType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string func = 2;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->func(), target);
  }

  // repeated string vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vars(i).data(), this->vars(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vars");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vars(i), target);
  }

  // optional .Val val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Req)
  return target;
}

int Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReqType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string func = 2;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func());
    }

    // optional .Val val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->val());
    }

  }
  // repeated string vars = 3;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req::MergeFrom(const Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_func()) {
      set_func(from.func());
    }
    if (from.has_val()) {
      mutable_val()->::Val::MergeFrom(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req::CopyFrom(const Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_val()) {
    if (!this->val().IsInitialized()) return false;
  }
  return true;
}

void Req::Swap(Req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(func_, other->func_);
    vars_.Swap(&other->vars_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_descriptor_;
  metadata.reflection = Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Res::kStatusFieldNumber;
const int Res::kResultFieldNumber;
const int Res::kErrorFieldNumber;
#endif  // !_MSC_VER

Res::Res()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Res)
}

void Res::InitAsDefaultInstance() {
}

Res::Res(const Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Res)
}

void Res::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Res::~Res() {
  // @@protoc_insertion_point(destructor:Res)
  SharedDtor();
}

void Res::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Res_descriptor_;
}

const Res& Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Res* Res::default_instance_ = NULL;

Res* Res::New() const {
  return new Res;
}

void Res::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ResStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ResStatus_IsValid(value)) {
            set_status(static_cast< ::ResStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .Val result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Res)
  return false;
#undef DO_
}

void Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Res)
  // required .ResStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .Val result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Res)
}

::google::protobuf::uint8* Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Res)
  // required .ResStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .Val result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Res)
  return target;
}

int Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ResStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  // repeated .Val result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Res::MergeFrom(const Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Res::CopyFrom(const Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void Res::Swap(Res* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    result_.Swap(&other->result_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Res_descriptor_;
  metadata.reflection = Res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
