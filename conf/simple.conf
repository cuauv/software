{
    // The below are highly dependent on trim
    "center_of_buoyancy": [0.0, 0.0, 0.0],
    "buoyancy_force": 300,
    "gravity_force": 300,

    // only used for partially submerged buoyancy force calculation, non critical
    "sub_height": 0.50,

    // Moments of inertia (kg * m^2) in the model frame.
    "I": [[ 1.0, 0.0, 0.0 ],
          [ 0.0, 1.0, 0.0 ],
          [ 0.0, 0.0, 1.0 ]],
    // Ib and body_rot calculated using auv-body-frame-calc.
    "Ib": [1.0, 1.0, 1.0],
    // A normalized quaternion representing rotation from the body to the model
    // frame.
    "btom_rq": [1.0, 0.0, 0.0, 0.0],
    // x was tweaked to reflect the limited real backwards thrust of our thrusters.
    "cwhe_axes": [20.0, 20.0, 40.0, 40.0, 40.0, 40.0],
    "thruster_minimums": [-20.0, -20.0, -40.0, -40.0, -40.0, -40.0],
    "thruster_maximums": [20.0, 20.0, 40.0, 40.0, 40.0, 40.0],
    "thrusters": [
        { "name": "fore_port",     "type": "Simple", "pos": [1, -1, 0],  "heading_pitch": [0, -90] },
        { "name": "port",          "type": "Simple", "pos": [0, -1, 0],  "heading_pitch": [0, 0]   },
        { "name": "aft_port",      "type": "Simple", "pos": [-1, -1, 0], "heading_pitch": [0, -90] },
        { "name": "sway_aft",      "type": "Simple", "pos": [-1, 0, 0],  "heading_pitch": [90, 0]  },
        { "name": "aft_starboard", "type": "Simple", "pos": [-1, 1, 0],  "heading_pitch": [0, -90] },
        { "name": "starboard",     "type": "Simple", "pos": [0, 1, 0],   "heading_pitch": [0, 0]   },
        { "name": "fore_starboard","type": "Simple", "pos": [1, 1, 0],   "heading_pitch": [0, -90] },
        { "name": "sway_fore",     "type": "Simple", "pos": [1, 0, 0],   "heading_pitch": [90, 0]  }
    ],
    "drag_planes": [
        // horizontal, produces drag when diving and pitching
        {
            "pos": [0.25, 0, 0],
            "normal": [0, 0, 1],
            "cD": 2.0,
            "area": 0.35
        },
        {
            "pos": [-0.25, 0, 0],
            "normal": [0, 0, 1],
            "cD": 2.0,
            "area": 0.35
        },
        // fore sway, produces drag when swaying and rolling
        {
            "pos": [0, 0, -0.10],
            "normal": [0, 1, 0],
            "cD": 2.0,
            "area": 0.2
        },
        // aft sway
        {
            "pos": [0, 0, 0.10],
            "normal": [0, 1, 0],
            "cD": 2.0,
            "area": 0.2
        },
        // vertical, produces drag when going forward and yawing
        {
            "pos": [0, -0.25, 0],
            "normal": [1, 0, 0],
            "cD": 2.0,
            "area": 0.10
        },
        {
            "pos": [0, 0.25, 0],
            "normal": [1, 0, 0],
            "cD": 2.0,
            "area": 0.10
        }
    ],
    // uncompensated drag, to simulate drag that is not accounted for by the controller
    // (or that the controller can't efectively account for)
    "uncompensated_drag_planes": [
    ],
    "sensors": {
        "depth": "depth.depth",
        "depth_offset": "depth.offset",
        "heading_rate": "him.yaw_vel",
        "pitch_rate": "him.pitch_vel",
        "roll_rate": "him.roll_vel",
        "velx": "dvl.velocity_x",
        "vely": "dvl.velocity_y",
        "velz": "dvl.velocity_z",
        "quaternion": "gx4"
    }
}
// vim: set filetype=javascript expandtab :
