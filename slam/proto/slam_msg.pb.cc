// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slam_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "slam_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slam {

namespace {

const ::google::protobuf::Descriptor* SlamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlamMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_slam_5fmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_slam_5fmsg_2eproto() {
  protobuf_AddDesc_slam_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "slam_msg.proto");
  GOOGLE_CHECK(file != NULL);
  SlamMsg_descriptor_ = file->message_type(0);
  static const int SlamMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, m_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, m_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, m_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, u_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, u_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, u_z_),
  };
  SlamMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlamMsg_descriptor_,
      SlamMsg::default_instance_,
      SlamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(SlamMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlamMsg, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_slam_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlamMsg_descriptor_, &SlamMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_slam_5fmsg_2eproto() {
  delete SlamMsg::default_instance_;
  delete SlamMsg_reflection_;
}

void protobuf_AddDesc_slam_5fmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_slam_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016slam_msg.proto\022\004slam\"t\n\007SlamMsg\022\n\n\002id\030"
    "\001 \002(\t\022\017\n\007request\030\002 \002(\010\022\013\n\003m_x\030\003 \001(\001\022\013\n\003m"
    "_y\030\004 \001(\001\022\013\n\003m_z\030\005 \001(\001\022\013\n\003u_x\030\006 \001(\001\022\013\n\003u_"
    "y\030\007 \001(\001\022\013\n\003u_z\030\010 \001(\001", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "slam_msg.proto", &protobuf_RegisterTypes);
  SlamMsg::default_instance_ = new SlamMsg();
  SlamMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_slam_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_slam_5fmsg_2eproto {
  StaticDescriptorInitializer_slam_5fmsg_2eproto() {
    protobuf_AddDesc_slam_5fmsg_2eproto();
  }
} static_descriptor_initializer_slam_5fmsg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlamMsg::kIdFieldNumber;
const int SlamMsg::kRequestFieldNumber;
const int SlamMsg::kMXFieldNumber;
const int SlamMsg::kMYFieldNumber;
const int SlamMsg::kMZFieldNumber;
const int SlamMsg::kUXFieldNumber;
const int SlamMsg::kUYFieldNumber;
const int SlamMsg::kUZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlamMsg::SlamMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slam.SlamMsg)
}

void SlamMsg::InitAsDefaultInstance() {
}

SlamMsg::SlamMsg(const SlamMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slam.SlamMsg)
}

void SlamMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_ = false;
  m_x_ = 0;
  m_y_ = 0;
  m_z_ = 0;
  u_x_ = 0;
  u_y_ = 0;
  u_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlamMsg::~SlamMsg() {
  // @@protoc_insertion_point(destructor:slam.SlamMsg)
  SharedDtor();
}

void SlamMsg::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SlamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlamMsg_descriptor_;
}

const SlamMsg& SlamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slam_5fmsg_2eproto();
  return *default_instance_;
}

SlamMsg* SlamMsg::default_instance_ = NULL;

SlamMsg* SlamMsg::New(::google::protobuf::Arena* arena) const {
  SlamMsg* n = new SlamMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:slam.SlamMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SlamMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SlamMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(m_x_, request_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SlamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slam.SlamMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slam.SlamMsg.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request;
        break;
      }

      // required bool request = 2;
      case 2: {
        if (tag == 16) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_m_x;
        break;
      }

      // optional double m_x = 3;
      case 3: {
        if (tag == 25) {
         parse_m_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_x_)));
          set_has_m_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_m_y;
        break;
      }

      // optional double m_y = 4;
      case 4: {
        if (tag == 33) {
         parse_m_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_y_)));
          set_has_m_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_m_z;
        break;
      }

      // optional double m_z = 5;
      case 5: {
        if (tag == 41) {
         parse_m_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_z_)));
          set_has_m_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_u_x;
        break;
      }

      // optional double u_x = 6;
      case 6: {
        if (tag == 49) {
         parse_u_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_x_)));
          set_has_u_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_u_y;
        break;
      }

      // optional double u_y = 7;
      case 7: {
        if (tag == 57) {
         parse_u_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_y_)));
          set_has_u_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_u_z;
        break;
      }

      // optional double u_z = 8;
      case 8: {
        if (tag == 65) {
         parse_u_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_z_)));
          set_has_u_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slam.SlamMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slam.SlamMsg)
  return false;
#undef DO_
}

void SlamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slam.SlamMsg)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slam.SlamMsg.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required bool request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request(), output);
  }

  // optional double m_x = 3;
  if (has_m_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->m_x(), output);
  }

  // optional double m_y = 4;
  if (has_m_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m_y(), output);
  }

  // optional double m_z = 5;
  if (has_m_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->m_z(), output);
  }

  // optional double u_x = 6;
  if (has_u_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->u_x(), output);
  }

  // optional double u_y = 7;
  if (has_u_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->u_y(), output);
  }

  // optional double u_z = 8;
  if (has_u_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->u_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:slam.SlamMsg)
}

::google::protobuf::uint8* SlamMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slam.SlamMsg)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slam.SlamMsg.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required bool request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request(), target);
  }

  // optional double m_x = 3;
  if (has_m_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->m_x(), target);
  }

  // optional double m_y = 4;
  if (has_m_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m_y(), target);
  }

  // optional double m_z = 5;
  if (has_m_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->m_z(), target);
  }

  // optional double u_x = 6;
  if (has_u_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->u_x(), target);
  }

  // optional double u_y = 7;
  if (has_u_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->u_y(), target);
  }

  // optional double u_z = 8;
  if (has_u_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->u_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:slam.SlamMsg)
  return target;
}

int SlamMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:slam.SlamMsg)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_request()) {
    // required bool request = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int SlamMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slam.SlamMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required bool request = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional double m_x = 3;
    if (has_m_x()) {
      total_size += 1 + 8;
    }

    // optional double m_y = 4;
    if (has_m_y()) {
      total_size += 1 + 8;
    }

    // optional double m_z = 5;
    if (has_m_z()) {
      total_size += 1 + 8;
    }

    // optional double u_x = 6;
    if (has_u_x()) {
      total_size += 1 + 8;
    }

    // optional double u_y = 7;
    if (has_u_y()) {
      total_size += 1 + 8;
    }

    // optional double u_z = 8;
    if (has_u_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlamMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slam.SlamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SlamMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SlamMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slam.SlamMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slam.SlamMsg)
    MergeFrom(*source);
  }
}

void SlamMsg::MergeFrom(const SlamMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slam.SlamMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_m_x()) {
      set_m_x(from.m_x());
    }
    if (from.has_m_y()) {
      set_m_y(from.m_y());
    }
    if (from.has_m_z()) {
      set_m_z(from.m_z());
    }
    if (from.has_u_x()) {
      set_u_x(from.u_x());
    }
    if (from.has_u_y()) {
      set_u_y(from.u_y());
    }
    if (from.has_u_z()) {
      set_u_z(from.u_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SlamMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slam.SlamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlamMsg::CopyFrom(const SlamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slam.SlamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlamMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SlamMsg::Swap(SlamMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlamMsg::InternalSwap(SlamMsg* other) {
  id_.Swap(&other->id_);
  std::swap(request_, other->request_);
  std::swap(m_x_, other->m_x_);
  std::swap(m_y_, other->m_y_);
  std::swap(m_z_, other->m_z_);
  std::swap(u_x_, other->u_x_);
  std::swap(u_y_, other->u_y_);
  std::swap(u_z_, other->u_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlamMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlamMsg_descriptor_;
  metadata.reflection = SlamMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlamMsg

// required string id = 1;
bool SlamMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SlamMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SlamMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SlamMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& SlamMsg::id() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SlamMsg::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:slam.SlamMsg.id)
}
 void SlamMsg::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:slam.SlamMsg.id)
}
 void SlamMsg::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:slam.SlamMsg.id)
}
 ::std::string* SlamMsg::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:slam.SlamMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SlamMsg::release_id() {
  // @@protoc_insertion_point(field_release:slam.SlamMsg.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SlamMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:slam.SlamMsg.id)
}

// required bool request = 2;
bool SlamMsg::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SlamMsg::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
void SlamMsg::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void SlamMsg::clear_request() {
  request_ = false;
  clear_has_request();
}
 bool SlamMsg::request() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.request)
  return request_;
}
 void SlamMsg::set_request(bool value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.request)
}

// optional double m_x = 3;
bool SlamMsg::has_m_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SlamMsg::set_has_m_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SlamMsg::clear_has_m_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SlamMsg::clear_m_x() {
  m_x_ = 0;
  clear_has_m_x();
}
 double SlamMsg::m_x() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.m_x)
  return m_x_;
}
 void SlamMsg::set_m_x(double value) {
  set_has_m_x();
  m_x_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.m_x)
}

// optional double m_y = 4;
bool SlamMsg::has_m_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SlamMsg::set_has_m_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SlamMsg::clear_has_m_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SlamMsg::clear_m_y() {
  m_y_ = 0;
  clear_has_m_y();
}
 double SlamMsg::m_y() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.m_y)
  return m_y_;
}
 void SlamMsg::set_m_y(double value) {
  set_has_m_y();
  m_y_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.m_y)
}

// optional double m_z = 5;
bool SlamMsg::has_m_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SlamMsg::set_has_m_z() {
  _has_bits_[0] |= 0x00000010u;
}
void SlamMsg::clear_has_m_z() {
  _has_bits_[0] &= ~0x00000010u;
}
void SlamMsg::clear_m_z() {
  m_z_ = 0;
  clear_has_m_z();
}
 double SlamMsg::m_z() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.m_z)
  return m_z_;
}
 void SlamMsg::set_m_z(double value) {
  set_has_m_z();
  m_z_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.m_z)
}

// optional double u_x = 6;
bool SlamMsg::has_u_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SlamMsg::set_has_u_x() {
  _has_bits_[0] |= 0x00000020u;
}
void SlamMsg::clear_has_u_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void SlamMsg::clear_u_x() {
  u_x_ = 0;
  clear_has_u_x();
}
 double SlamMsg::u_x() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.u_x)
  return u_x_;
}
 void SlamMsg::set_u_x(double value) {
  set_has_u_x();
  u_x_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.u_x)
}

// optional double u_y = 7;
bool SlamMsg::has_u_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SlamMsg::set_has_u_y() {
  _has_bits_[0] |= 0x00000040u;
}
void SlamMsg::clear_has_u_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void SlamMsg::clear_u_y() {
  u_y_ = 0;
  clear_has_u_y();
}
 double SlamMsg::u_y() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.u_y)
  return u_y_;
}
 void SlamMsg::set_u_y(double value) {
  set_has_u_y();
  u_y_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.u_y)
}

// optional double u_z = 8;
bool SlamMsg::has_u_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SlamMsg::set_has_u_z() {
  _has_bits_[0] |= 0x00000080u;
}
void SlamMsg::clear_has_u_z() {
  _has_bits_[0] &= ~0x00000080u;
}
void SlamMsg::clear_u_z() {
  u_z_ = 0;
  clear_has_u_z();
}
 double SlamMsg::u_z() const {
  // @@protoc_insertion_point(field_get:slam.SlamMsg.u_z)
  return u_z_;
}
 void SlamMsg::set_u_z(double value) {
  set_has_u_z();
  u_z_ = value;
  // @@protoc_insertion_point(field_set:slam.SlamMsg.u_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace slam

// @@protoc_insertion_point(global_scope)
